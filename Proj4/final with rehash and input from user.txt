package proj4;
import java.io.*;
import java.util.*;


public class threeways {
	static HashSet<String> llSet=new HashSet<>();
	static HashSet<String> treeSet=new HashSet<>();
	static HashSet<String> hashSet=new HashSet<>();
	public static void main(String[] args) throws IOException {

		Scanner sc=new Scanner(System.in);
		Random r=new Random();
		
		System.out.println("Enter the number of rows : ");
		int row=sc.nextInt();
		System.out.println("Enter the number of columns : ");
		int col=sc.nextInt();
		char charTable[][]=new char[row][col];
		for (int i = 0; i < row; i++) {
			for (int j = 0; j < col; j++) {
				charTable[i][j]=(char)(r.nextInt(26)+'a');
			}
		}

		for (int i = 0; i < charTable.length; i++) {
			System.out.println(Arrays.toString(charTable[i]));
		}	

		String line = null;
		String fileName = "C:/Users/Sreevatsa H V/Desktop/dictionary%281%29.txt";
		LinkedList<String> Mylinked=new LinkedList<String>();
		AvlTree<String> t = new AvlTree<>( );
		ArrayList<String> mytable[]=new ArrayList[100];
		int maxlength=0, spaceTaken=0;;
		try {
			FileReader file=new FileReader(fileName);
			BufferedReader bufferedReader = new BufferedReader(file);

			while((line = bufferedReader.readLine()) != null) 
			{
				if(line.length()>maxlength)
				{
					maxlength=line.length();
				}
				//ArrayList<String> list1=mytable[myHashFunc(line,mytable.length)];
				Mylinked.add(line);	 
				t.insert(line);

				if(spaceTaken>mytable.length/2)
					mytable=rehashMethod(mytable);
				
					if(mytable[myHashFunc(line,mytable.length)]==null)
					{
						mytable[myHashFunc(line,mytable.length)]=new ArrayList();
						mytable[myHashFunc(line,mytable.length)].add(line);
						spaceTaken++;
					}
					else
					{	
						if(mytable[myHashFunc(line,mytable.length)].indexOf(line)==-1)
						{
							mytable[myHashFunc(line,mytable.length)].add(line);
						}
					}
			} 
			bufferedReader.close(); 
		}

		catch (FileNotFoundException e){
			e.printStackTrace();
		}
		System.out.println(maxlength);


		//	 for linked list 

		Long start = System.currentTimeMillis( );
		for (int i = 0; i < charTable.length; i++) 
		{
			for (int j = 0; j < charTable[i].length; j++) {
				//get the (i,j)character
				StringBuilder sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for horizontal right
				if(charTable[i].length<maxlength)
					maxlength=charTable[i].length;

				for (int j2 = 0; j2 < maxlength; j2++) {

					if(Mylinked.contains(sb.toString())){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");
						llSet.add(sb.toString());
					}
					if(j+j2+1<charTable[i].length)
						sb.append(charTable[i][j+j2+1]);
					else
						break;

				}
				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for horizontal left
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(j-j2-1>=0)
						sb.append(charTable[i][j-j2-1]);
					else
						break;

					if(Mylinked.contains(sb.toString())){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");
						llSet.add(sb.toString());
					}
				}

				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for vertical upper
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(i-j2-1>=0)
						sb.append(charTable[i-j2-1][j]);
					else
						break;

					if(Mylinked.contains(sb.toString())){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");
						llSet.add(sb.toString());
					}
				}

				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for vertical lower
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(i+j2+1<charTable.length)
						sb.append(charTable[i+j2+1][j]);
					else
						break;

					if(Mylinked.contains(sb.toString())){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");
						llSet.add(sb.toString());
					}
				}

				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for diag upper left
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(i-j2-1>=0 && j-j2-1>=0 )
						sb.append(charTable[i-j2-1][j-j2-1]);
					else
						break;

					if(Mylinked.contains(sb.toString())){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");
						llSet.add(sb.toString());
					}
				}
				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for diag upper right
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(i-j2-1>=0 && j+j2+1<charTable[i].length )
						sb.append(charTable[i-j2-1][j+j2+1]);
					else
						break;

					if(Mylinked.contains(sb.toString())){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");
						llSet.add(sb.toString());
					}
				}

				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for diag lower left
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(i+j2+1<charTable.length && j-j2-1>=0 )
						sb.append(charTable[i+j2+1][j-j2-1]);
					else
						break;
					if(Mylinked.contains(sb.toString())){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");
						llSet.add(sb.toString());
					}
				}
				//				
				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for diag lower right
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(i+j2+1<charTable.length && j+j2+1<charTable[i].length )
						sb.append(charTable[i+j2+1][j+j2+1]);
					else
						break;

					if(Mylinked.contains(sb.toString())){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");
						llSet.add(sb.toString());
					}
				}
			}
		}
		Long end = System.currentTimeMillis( );
		System.out.println( "Elapsed time for linked list: " + (end-start) );




		// for trees


		Long start1 = System.currentTimeMillis( );
		for (int i = 0; i < charTable.length; i++) 
		{
			for (int j = 0; j < charTable[i].length; j++) {
				//get the (i,j)character
				StringBuilder sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for horizontal right
				if(charTable[i].length<maxlength)
					maxlength=charTable[i].length;

				for (int j2 = 0; j2 < maxlength; j2++) {

					if(t.contains(sb.toString())){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");
						treeSet.add(sb.toString());
					}


					if(j+j2+1<charTable[i].length)
						sb.append(charTable[i][j+j2+1]);
					else
						break;

				}
				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for horizontal left
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(j-j2-1>=0)
						sb.append(charTable[i][j-j2-1]);
					else
						break;

					if(t.contains(sb.toString())){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");
						treeSet.add(sb.toString());
					}
				}

				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for vertical upper
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(i-j2-1>=0)
						sb.append(charTable[i-j2-1][j]);
					else
						break;

					if(t.contains(sb.toString())){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");
						treeSet.add(sb.toString());
					}
				}

				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for vertical lower
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(i+j2+1<charTable.length)
						sb.append(charTable[i+j2+1][j]);
					else
						break;

					if(t.contains(sb.toString())){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");
						treeSet.add(sb.toString());
					}
				}

				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for diag upper left
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(i-j2-1>=0 && j-j2-1>=0 )
						sb.append(charTable[i-j2-1][j-j2-1]);
					else
						break;

					if(t.contains(sb.toString())){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");
						treeSet.add(sb.toString());
					}
				}
				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for diag upper right
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(i-j2-1>=0 && j+j2+1<charTable[i].length )
						sb.append(charTable[i-j2-1][j+j2+1]);
					else
						break;

					if(t.contains(sb.toString())){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");
						treeSet.add(sb.toString());
					}
				}
				//				
				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for diag lower left
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(i+j2+1<charTable.length && j-j2-1>=0 )
						sb.append(charTable[i+j2+1][j-j2-1]);
					else
						break;

					if(t.contains(sb.toString())){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");
						treeSet.add(sb.toString());
					}
				}
				//				
				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for diag lower right
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(i+j2+1<charTable.length && j+j2+1<charTable[i].length )
						sb.append(charTable[i+j2+1][j+j2+1]);
					else
						break;

					if(t.contains(sb.toString())){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");
						treeSet.add(sb.toString());
					}
				}
			}
		}
		Long end1 = System.currentTimeMillis( );
		System.out.println( "Elapsed time for tree structure is: " + (end1-start1) );








		// for hash table part

		Long start2 = System.currentTimeMillis( );
		for (int i = 0; i < charTable.length; i++) 
		{
			for (int j = 0; j < charTable[i].length; j++) {
				StringBuilder sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for horizontal right
				if(charTable[i].length<maxlength)
					maxlength=charTable[i].length;

				for (int j2 = 0; j2 < maxlength; j2++) {

					ArrayList<String> list=mytable[myHashFunc(sb.toString(),mytable.length)];
					
					if((list!=null && list.contains(sb.toString()))){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");	
						hashSet.add(sb.toString());
					}

					if(j+j2+1<charTable[i].length)
						sb.append(charTable[i][j+j2+1]);
					else
						break;

				}
				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for horizontal left
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(j-j2-1>=0)
						sb.append(charTable[i][j-j2-1]);
					else
						break;
					ArrayList<String> list=mytable[myHashFunc(sb.toString(),mytable.length)];
					
					if((list!=null && list.contains(sb.toString()))){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");	
						hashSet.add(sb.toString());
					}
				}

				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for vertical upper
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(i-j2-1>=0)
						sb.append(charTable[i-j2-1][j]);
					else
						break;
					ArrayList<String> list=mytable[myHashFunc(sb.toString(),mytable.length)];
					
					if((list!=null && list.contains(sb.toString()))){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");	
						hashSet.add(sb.toString());
					}
				}

				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for vertical lower
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(i+j2+1<charTable.length)
						sb.append(charTable[i+j2+1][j]);
					else
						break;
					ArrayList<String> list=mytable[myHashFunc(sb.toString(),mytable.length)];
					
					if((list!=null && list.contains(sb.toString()))){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");	
						hashSet.add(sb.toString());
					}
				}

				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for diag upper left
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(i-j2-1>=0 && j-j2-1>=0 )
						sb.append(charTable[i-j2-1][j-j2-1]);
					else
						break;
					ArrayList<String> list=mytable[myHashFunc(sb.toString(),mytable.length)];
					
					if((list!=null && list.contains(sb.toString()))){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");	
						hashSet.add(sb.toString());
					}
				}
				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for diag upper right
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(i-j2-1>=0 && j+j2+1<charTable[i].length )
						sb.append(charTable[i-j2-1][j+j2+1]);
					else
						break;
					ArrayList<String> list=mytable[myHashFunc(sb.toString(),mytable.length)];
					
					if((list!=null && list.contains(sb.toString()))){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");	
						hashSet.add(sb.toString());
					}

				}

				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for diag lower left
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(i+j2+1<charTable.length && j-j2-1>=0 )
						sb.append(charTable[i+j2+1][j-j2-1]);
					else
						break;
					ArrayList<String> list=mytable[myHashFunc(sb.toString(),mytable.length)];
					
					if((list!=null && list.contains(sb.toString()))){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");	
						hashSet.add(sb.toString());
					}
				}

				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for diag lower right
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(i+j2+1<charTable.length && j+j2+1<charTable[i].length )
						sb.append(charTable[i+j2+1][j+j2+1]);
					else
						break;
					
					ArrayList<String> list=mytable[myHashFunc(sb.toString(),mytable.length)];
					
					if((list!=null && list.contains(sb.toString()))){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");	
						hashSet.add(sb.toString());
					}
				}
			}
		}
		Long end2 = System.currentTimeMillis( );
		System.out.println( "Elapsed time for hash table is: " + (end2-start2) );


		System.out.println(llSet.size());
		System.out.println(treeSet.size());
		System.out.println(hashSet.size());
System.out.println(mytable.length);
	}

	private static int myHashFunc(String key, int tableSize){
		int value = 0;

		for(int i=0;i<key.length();i++)	
			value=value+(key.charAt(i)*((i^3)+(i*11)*(i*4)));
		
		value = value%tableSize;
		return value;
	}
	
	
	private static ArrayList<String>[] rehashMethod(ArrayList table[])
	{
		int k=table.length;
		ArrayList<String> newtable[]=new ArrayList[2*k];
		
		for(int m=0;m<table.length;m++)
		{
			if(table[m]!=null)
			{
				for(int n=0;n<table[m].size();n++)
				{
					ArrayList<String> x = new ArrayList<String>();
					x=table[m];
					if(newtable[myHashFunc(x.get(n),newtable.length)]==null)
					{
						newtable[myHashFunc(x.get(n),newtable.length)]=new ArrayList();
						newtable[myHashFunc(x.get(n),newtable.length)].add(x.get(n));
					}
					else
					{
						if(newtable[myHashFunc(x.get(n),newtable.length)].indexOf(x.get(n))==-1)
							newtable[myHashFunc(x.get(n),newtable.length)].add(x.get(n));
					}
				}
			}
		}
		return newtable;
	}
}




class AvlTree<AnyType extends Comparable<? super AnyType>>
{
   public AvlTree( )
   {
       root = null;
   }

   public void insert( AnyType x )
   {
       root = insert( x, root );
   }

   public void remove( AnyType x )
   {
       root = remove( x, root );
   }

   private AvlNode<AnyType> remove( AnyType x, AvlNode<AnyType> t )
   {
       if( t == null )
           return t;   // Item not found; do nothing
           
       int compareResult = x.compareTo( t.element );
           
       if( compareResult < 0 )
           t.left = remove( x, t.left );
       else if( compareResult > 0 )
           t.right = remove( x, t.right );
       else if( t.left != null && t.right != null ) // Two children
       {
           t.element = findMin( t.right ).element;
           t.right = remove( t.element, t.right );
       }
       else
           t = ( t.left != null ) ? t.left : t.right;
       return balance( t );
   }
  
   public boolean contains( AnyType x )
   {
       return contains( x, root );
   }

   public void makeEmpty( )
   {
       root = null;
   }

   public boolean isEmpty( )
   {
       return root == null;
   }

   public void printTree( )
   {
       if( isEmpty( ) )
           System.out.println( "Empty tree" );
       else
           printTree( root );
   }

   private static final int ALLOWED_IMBALANCE = 1;
   
   // Assume t is either balanced or within one of being balanced
   private AvlNode<AnyType> balance( AvlNode<AnyType> t )
   {
       if( t == null )
           return t;
       
       if( height( t.left ) - height( t.right ) > ALLOWED_IMBALANCE )
           if( height( t.left.left ) >= height( t.left.right ) )
               t = rotateWithLeftChild( t );
           else
               t = doubleWithLeftChild( t );
       else
       if( height( t.right ) - height( t.left ) > ALLOWED_IMBALANCE )
           if( height( t.right.right ) >= height( t.right.left ) )
               t = rotateWithRightChild( t );
           else
               t = doubleWithRightChild( t );

       t.height = Math.max( height( t.left ), height( t.right ) ) + 1;
       return t;
   }
   
   public void checkBalance( )
   {
       checkBalance( root );
   }
   
   private int checkBalance( AvlNode<AnyType> t )
   {
       if( t == null )
           return -1;
       
       if( t != null )
       {
           int hl = checkBalance( t.left );
           int hr = checkBalance( t.right );
           if( Math.abs( height( t.left ) - height( t.right ) ) > 1 ||
                   height( t.left ) != hl || height( t.right ) != hr )
               System.out.println( "OOPS!!" );
       }
       
       return height( t );
   }
   
   private AvlNode<AnyType> insert( AnyType x, AvlNode<AnyType> t )
   {
       if( t == null )
           return new AvlNode<>( x, null, null );
       
       int compareResult = x.compareTo( t.element );
       
       if( compareResult < 0 )
           t.left = insert( x, t.left );
       else if( compareResult > 0 )
           t.right = insert( x, t.right );
       else
           ;  // Duplicate; do nothing
       return balance( t );
   }

   private AvlNode<AnyType> findMin( AvlNode<AnyType> t )
   {
       if( t == null )
           return t;

       while( t.left != null )
           t = t.left;
       return t;
   }

   private AvlNode<AnyType> findMax( AvlNode<AnyType> t )
   {
       if( t == null )
           return t;

       while( t.right != null )
           t = t.right;
       return t;
   }

   private boolean contains( AnyType x, AvlNode<AnyType> t )
   {
       while( t != null )
       {
           int compareResult = x.compareTo( t.element );
           
           if( compareResult < 0 )
               t = t.left;
           else if( compareResult > 0 )
               t = t.right;
           else
               return true;    // Match
       }

       return false;   // No match
   }

   private void printTree( AvlNode<AnyType> t )
   {
       if( t != null )
       {
           printTree( t.left );
           System.out.println( t.element );
           printTree( t.right );
       }
   }

   private int height( AvlNode<AnyType> t )
   {
       return t == null ? -1 : t.height;
   }

   private AvlNode<AnyType> rotateWithLeftChild( AvlNode<AnyType> k2 )
   {
       AvlNode<AnyType> k1 = k2.left;
       k2.left = k1.right;
       k1.right = k2;
       k2.height = Math.max( height( k2.left ), height( k2.right ) ) + 1;
       k1.height = Math.max( height( k1.left ), k2.height ) + 1;
       return k1;
   }

   private AvlNode<AnyType> rotateWithRightChild( AvlNode<AnyType> k1 )
   {
       AvlNode<AnyType> k2 = k1.right;
       k1.right = k2.left;
       k2.left = k1;
       k1.height = Math.max( height( k1.left ), height( k1.right ) ) + 1;
       k2.height = Math.max( height( k2.right ), k1.height ) + 1;
       return k2;
   }

   private AvlNode<AnyType> doubleWithLeftChild( AvlNode<AnyType> k3 )
   {
       k3.left = rotateWithRightChild( k3.left );
       return rotateWithLeftChild( k3 );
   }

   private AvlNode<AnyType> doubleWithRightChild( AvlNode<AnyType> k1 )
   {
       k1.right = rotateWithLeftChild( k1.right );
       return rotateWithRightChild( k1 );
   }

   private static class AvlNode<AnyType>
   {
           // Constructors
       AvlNode( AnyType theElement )
       {
           this( theElement, null, null );
       }

       AvlNode( AnyType theElement, AvlNode<AnyType> lt, AvlNode<AnyType> rt )
       {
           element  = theElement;
           left     = lt;
           right    = rt;
           height   = 0;
       }

       AnyType           element;      // The data in the node
       AvlNode<AnyType>  left;         // Left child
       AvlNode<AnyType>  right;        // Right child
       int               height;       // Height
   }

   private AvlNode<AnyType> root;
}