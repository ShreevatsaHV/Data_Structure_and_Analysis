package proj4;
import java.io.*;
import java.util.*;
//import proj4.avltreemethods.AvlNode;

public class threeways {
	static HashSet<String> llSet=new HashSet<>();
	static HashSet<String> treeSet=new HashSet<>();
	static HashSet<String> hashSet=new HashSet<>();
	public static void main(String[] args) throws IOException {

		Random r=new Random();
		int row=10,col=10;
		char charTable[][]=new char[row][col];
		for (int i = 0; i < row; i++) {
			for (int j = 0; j < col; j++) {
				charTable[i][j]=(char)(r.nextInt(26)+'a');
			}
		}

		for (int i = 0; i < charTable.length; i++) {
			System.out.println(Arrays.toString(charTable[i]));
		}	

		String line = null;
		String fileName = "C:/Users/Sreevatsa H V/Desktop/dictionary%281%29.txt";
		LinkedList<String> Mylinked=new LinkedList<String>();
		RedBlackTree<String> t = new RedBlackTree<>( );
		ArrayList<String> mytable[]=new ArrayList[10000];
		int maxlength=0;
		try {
			FileReader file=new FileReader(fileName);
			BufferedReader bufferedReader = new BufferedReader(file);

			while((line = bufferedReader.readLine()) != null) 
			{
				if(line.length()>maxlength)
				{
					maxlength=line.length();
				}
				//ArrayList<String> list1=mytable[myHashFunc(line,mytable.length)];
				Mylinked.add(line);	 
				t.insert(line);

								if(mytable[myHashFunc(line,mytable.length)]==null)
								{
									mytable[myHashFunc(line,mytable.length)]=new ArrayList();
									mytable[myHashFunc(line,mytable.length)].add(line);
								}
								else
								{
									    if(mytable[myHashFunc(line,mytable.length)].indexOf(line)==-1)
									    	mytable[myHashFunc(line,mytable.length)].add(line);
								}
			} 
			bufferedReader.close(); 
		}

		catch (FileNotFoundException e){
			e.printStackTrace();
		}
		System.out.println(maxlength);


		//	 for linked list 

		Long start = System.currentTimeMillis( );
		for (int i = 0; i < charTable.length; i++) 
		{
			for (int j = 0; j < charTable[i].length; j++) {
				//get the (i,j)character
				StringBuilder sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for horizontal right
				if(charTable[i].length<maxlength)
					maxlength=charTable[i].length;

				for (int j2 = 0; j2 < maxlength; j2++) {

					if(Mylinked.contains(sb.toString())){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");
						llSet.add(sb.toString());
					}
					if(j+j2+1<charTable[i].length)
						sb.append(charTable[i][j+j2+1]);
					else
						break;

				}
				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for horizontal left
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(j-j2-1>=0)
						sb.append(charTable[i][j-j2-1]);
					else
						break;

					if(Mylinked.contains(sb.toString())){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");
						llSet.add(sb.toString());
					}
				}

				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for vertical upper
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(i-j2-1>=0)
						sb.append(charTable[i-j2-1][j]);
					else
						break;

					if(Mylinked.contains(sb.toString())){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");
						llSet.add(sb.toString());
					}
				}

				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for vertical lower
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(i+j2+1<charTable.length)
						sb.append(charTable[i+j2+1][j]);
					else
						break;

					if(Mylinked.contains(sb.toString())){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");
						llSet.add(sb.toString());
					}
				}

				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for diag upper left
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(i-j2-1>=0 && j-j2-1>=0 )
						sb.append(charTable[i-j2-1][j-j2-1]);
					else
						break;

					if(Mylinked.contains(sb.toString())){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");
						llSet.add(sb.toString());
					}
				}
				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for diag upper right
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(i-j2-1>=0 && j+j2+1<charTable[i].length )
						sb.append(charTable[i-j2-1][j+j2+1]);
					else
						break;

					if(Mylinked.contains(sb.toString())){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");
						llSet.add(sb.toString());
					}
				}

				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for diag lower left
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(i+j2+1<charTable.length && j-j2-1>=0 )
						sb.append(charTable[i+j2+1][j-j2-1]);
					else
						break;
					if(Mylinked.contains(sb.toString())){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");
						llSet.add(sb.toString());
					}
				}
				//				
				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for diag lower right
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(i+j2+1<charTable.length && j+j2+1<charTable[i].length )
						sb.append(charTable[i+j2+1][j+j2+1]);
					else
						break;

					if(Mylinked.contains(sb.toString())){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");
						llSet.add(sb.toString());
					}
				}
			}
		}
		Long end = System.currentTimeMillis( );
		System.out.println( "Elapsed time for linked list: " + (end-start) );




		// for trees


		Long start1 = System.currentTimeMillis( );
		for (int i = 0; i < charTable.length; i++) 
		{
			for (int j = 0; j < charTable[i].length; j++) {
				//get the (i,j)character
				StringBuilder sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for horizontal right
				if(charTable[i].length<maxlength)
					maxlength=charTable[i].length;

				for (int j2 = 0; j2 < maxlength; j2++) {

					if(t.contains(sb.toString())){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");
						treeSet.add(sb.toString());
					}


					if(j+j2+1<charTable[i].length)
						sb.append(charTable[i][j+j2+1]);
					else
						break;

				}
				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for horizontal left
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(j-j2-1>=0)
						sb.append(charTable[i][j-j2-1]);
					else
						break;

					if(t.contains(sb.toString())){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");
						treeSet.add(sb.toString());
					}
				}

				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for vertical upper
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(i-j2-1>=0)
						sb.append(charTable[i-j2-1][j]);
					else
						break;

					if(t.contains(sb.toString())){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");
						treeSet.add(sb.toString());
					}
				}

				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for vertical lower
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(i+j2+1<charTable.length)
						sb.append(charTable[i+j2+1][j]);
					else
						break;

					if(t.contains(sb.toString())){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");
						treeSet.add(sb.toString());
					}
				}

				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for diag upper left
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(i-j2-1>=0 && j-j2-1>=0 )
						sb.append(charTable[i-j2-1][j-j2-1]);
					else
						break;

					if(t.contains(sb.toString())){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");
						treeSet.add(sb.toString());
					}
				}
				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for diag upper right
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(i-j2-1>=0 && j+j2+1<charTable[i].length )
						sb.append(charTable[i-j2-1][j+j2+1]);
					else
						break;

					if(t.contains(sb.toString())){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");
						treeSet.add(sb.toString());
					}
				}
				//				
				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for diag lower left
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(i+j2+1<charTable.length && j-j2-1>=0 )
						sb.append(charTable[i+j2+1][j-j2-1]);
					else
						break;

					if(t.contains(sb.toString())){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");
						treeSet.add(sb.toString());
					}
				}
				//				
				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for diag lower right
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(i+j2+1<charTable.length && j+j2+1<charTable[i].length )
						sb.append(charTable[i+j2+1][j+j2+1]);
					else
						break;

					if(t.contains(sb.toString())){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");
						treeSet.add(sb.toString());
					}
				}
			}
		}
		Long end1 = System.currentTimeMillis( );
		System.out.println( "Elapsed time for tree structure is: " + (end1-start1) );








		// for hash table part

		Long start2 = System.currentTimeMillis( );
		for (int i = 0; i < charTable.length; i++) 
		{
			for (int j = 0; j < charTable[i].length; j++) {
				StringBuilder sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for horizontal right
				if(charTable[i].length<maxlength)
					maxlength=charTable[i].length;

				for (int j2 = 0; j2 < maxlength; j2++) {

					ArrayList<String> list=mytable[myHashFunc(sb.toString(),mytable.length)];

					if(list!=null && list.contains(sb.toString())){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");	
						hashSet.add(sb.toString());
					}

					if(j+j2+1<charTable[i].length)
						sb.append(charTable[i][j+j2+1]);
					else
						break;

				}
				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for horizontal left
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(j-j2-1>=0)
						sb.append(charTable[i][j-j2-1]);
					else
						break;

					ArrayList<String> list=mytable[myHashFunc(sb.toString(),mytable.length)];

					if(list!=null && list.contains(sb.toString())){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");	
						hashSet.add(sb.toString());
					}
				}

				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for vertical upper
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(i-j2-1>=0)
						sb.append(charTable[i-j2-1][j]);
					else
						break;

					ArrayList<String> list=mytable[myHashFunc(sb.toString(),mytable.length)];

					if(list!=null && list.contains(sb.toString())){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");	
						hashSet.add(sb.toString());
					}
				}

				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for vertical lower
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(i+j2+1<charTable.length)
						sb.append(charTable[i+j2+1][j]);
					else
						break;

					ArrayList<String> list=mytable[myHashFunc(sb.toString(),mytable.length)];

					if(list!=null && list.contains(sb.toString())){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");	
						hashSet.add(sb.toString());
					}
				}

				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for diag upper left
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(i-j2-1>=0 && j-j2-1>=0 )
						sb.append(charTable[i-j2-1][j-j2-1]);
					else
						break;

					ArrayList<String> list=mytable[myHashFunc(sb.toString(),mytable.length)];

					if(list!=null && list.contains(sb.toString())){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");	
						hashSet.add(sb.toString());
					}
				}
				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for diag upper right
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(i-j2-1>=0 && j+j2+1<charTable[i].length )
						sb.append(charTable[i-j2-1][j+j2+1]);
					else
						break;

					ArrayList<String> list=mytable[myHashFunc(sb.toString(),mytable.length)];

					if(list!=null && list.contains(sb.toString())){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");	
						hashSet.add(sb.toString());
					}

				}

				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for diag lower left
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(i+j2+1<charTable.length && j-j2-1>=0 )
						sb.append(charTable[i+j2+1][j-j2-1]);
					else
						break;

					ArrayList<String> list=mytable[myHashFunc(sb.toString(),mytable.length)];

					if(list!=null && list.contains(sb.toString())){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");	
						hashSet.add(sb.toString());
					}
				}

				sb=new StringBuilder();
				sb.append(charTable[i][j]);

				//for diag lower right
				for (int j2 = 0; j2 < maxlength; j2++) {

					if(i+j2+1<charTable.length && j+j2+1<charTable[i].length )
						sb.append(charTable[i+j2+1][j+j2+1]);
					else
						break;

					ArrayList<String> list=mytable[myHashFunc(sb.toString(),mytable.length)];

					if(list!=null && list.contains(sb.toString())){
						System.out.println(sb.toString() + " is present in "+(i+1)+" row");	
						hashSet.add(sb.toString());
					}
				}
			}
		}
		Long end2 = System.currentTimeMillis( );
		System.out.println( "Elapsed time for hash table is: " + (end2-start2) );


		System.out.println(llSet.size());
		System.out.println(treeSet.size());
		System.out.println(hashSet.size());

	}

	private static int myHashFunc(String key, int tableSize){

		int hashVal = 0;

		for(int i=0;i<key.length();i++)
		{
			
			hashVal=hashVal+(key.charAt(i)*((i^3)+(i*11)*(i*4)));
		}
		
		
		
//		for( int i = 0; i < key.length( ); i++ )
//			hashVal = 37 * hashVal + key.charAt( i );
//
		hashVal %= tableSize;
		if( hashVal < 0 )
			hashVal += tableSize;

		return hashVal;

	}
}


class RedBlackTree<AnyType extends Comparable<? super AnyType>>
{
	/**
	 * Construct the tree.
	 */
	public RedBlackTree( )
	{
		nullNode = new RedBlackNode<>( null );
		nullNode.left = nullNode.right = nullNode;
		header      = new RedBlackNode<>( null );
		header.left = header.right = nullNode;
	}

	/**
	 * Compare item and t.element, using compareTo, with
	 * caveat that if t is header, then item is always larger.
	 * This routine is called if is possible that t is header.
	 * If it is not possible for t to be header, use compareTo directly.
	 */
	private int compare( AnyType item, RedBlackNode<AnyType> t )
	{
		if( t == header )
			return 1;
		else
			return item.compareTo( t.element );    
	}

	/**
	 * Insert into the tree.
	 * @param item the item to insert.
	 */
	public void insert( AnyType item )
	{
		current = parent = grand = header;
		nullNode.element = item;

		while( compare( item, current ) != 0 )
		{
			great = grand; grand = parent; parent = current;
			current = compare( item, current ) < 0 ?
					current.left : current.right;

			// Check if two red children; fix if so
			if( current.left.color == RED && current.right.color == RED )
				handleReorient( item );
		}

		// Insertion fails if already present
		if( current != nullNode )
			return;
		current = new RedBlackNode<>( item, nullNode, nullNode );

		// Attach to parent
		if( compare( item, parent ) < 0 )
			parent.left = current;
		else
			parent.right = current;
		handleReorient( item );
	}

	/**
	 * Remove from the tree.
	 * @param x the item to remove.
	 * @throws UnsupportedOperationException if called.
	 */
	public void remove( AnyType x )
	{
		throw new UnsupportedOperationException( );
	}

	/**
	 * Find the smallest item  the tree.
	 * @return the smallest item or throw UnderflowExcepton if empty.
	 * @throws Exception 
	 */
	public AnyType findMin( ) throws Exception
	{
		if( isEmpty( ) )
			throw new Exception( );

		RedBlackNode<AnyType> itr = header.right;

		while( itr.left != nullNode )
			itr = itr.left;

		return itr.element;
	}

	/**
	 * Find the largest item in the tree.
	 * @return the largest item or throw UnderflowExcepton if empty.
	 * @throws Exception 
	 */
	public AnyType findMax( ) throws Exception
	{
		if( isEmpty( ) )
			throw new Exception( );

		RedBlackNode<AnyType> itr = header.right;

		while( itr.right != nullNode )
			itr = itr.right;

		return itr.element;
	}

	/**
	 * Find an item in the tree.
	 * @param x the item to search for.
	 * @return true if x is found; otherwise false.
	 */
	public boolean contains( AnyType x )
	{
		nullNode.element = x;
		current = header.right;

		for( ; ; )
		{
			if( x.compareTo( current.element ) < 0 )
				current = current.left;
			else if( x.compareTo( current.element ) > 0 ) 
				current = current.right;
			else if( current != nullNode )
				return true;
			else
				return false;
		}
	}

	/**
	 * Make the tree logically empty.
	 */
	public void makeEmpty( )
	{
		header.right = nullNode;
	}

	/**
	 * Print the tree contents in sorted order.
	 */
	public void printTree( )
	{
		if( isEmpty( ) )
			System.out.println( "Empty tree" );
		else
			printTree( header.right );
	}

	/**
	 * Internal method to print a subtree in sorted order.
	 * @param t the node that roots the subtree.
	 */
	private void printTree( RedBlackNode<AnyType> t )
	{
		if( t != nullNode )
		{
			printTree( t.left );
			System.out.println( t.element );
			printTree( t.right );
		}
	}

	/**
	 * Test if the tree is logically empty.
	 * @return true if empty, false otherwise.
	 */
	public boolean isEmpty( )
	{
		return header.right == nullNode;
	}

	/**
	 * Internal routine that is called during an insertion
	 * if a node has two red children. Performs flip and rotations.
	 * @param item the item being inserted.
	 */
	private void handleReorient( AnyType item )
	{
		// Do the color flip
		current.color = RED;
		current.left.color = BLACK;
		current.right.color = BLACK;

		if( parent.color == RED )   // Have to rotate
		{
			grand.color = RED;
			if( ( compare( item, grand ) < 0 ) !=
					( compare( item, parent ) < 0 ) )
				parent = rotate( item, grand );  // Start dbl rotate
			current = rotate( item, great );
			current.color = BLACK;
		}
		header.right.color = BLACK; // Make root black
	}

	/**
	 * Internal routine that performs a single or double rotation.
	 * Because the result is attached to the parent, there are four cases.
	 * Called by handleReorient.
	 * @param item the item in handleReorient.
	 * @param parent the parent of the root of the rotated subtree.
	 * @return the root of the rotated subtree.
	 */
	private RedBlackNode<AnyType> rotate( AnyType item, RedBlackNode<AnyType> parent )
	{
		if( compare( item, parent ) < 0 )
			return parent.left = compare( item, parent.left ) < 0 ?
					rotateWithLeftChild( parent.left )  :  // LL
						rotateWithRightChild( parent.left ) ;  // LR
					else
						return parent.right = compare( item, parent.right ) < 0 ?
								rotateWithLeftChild( parent.right ) :  // RL
									rotateWithRightChild( parent.right );  // RR
	}

	/**
	 * Rotate binary tree node with left child.
	 */
	private RedBlackNode<AnyType> rotateWithLeftChild( RedBlackNode<AnyType> k2 )
	{
		RedBlackNode<AnyType> k1 = k2.left;
		k2.left = k1.right;
		k1.right = k2;
		return k1;
	}

	/**
	 * Rotate binary tree node with right child.
	 */
	private RedBlackNode<AnyType> rotateWithRightChild( RedBlackNode<AnyType> k1 )
	{
		RedBlackNode<AnyType> k2 = k1.right;
		k1.right = k2.left;
		k2.left = k1;
		return k2;
	}

	private static class RedBlackNode<AnyType>
	{
		// Constructors
		RedBlackNode( AnyType theElement )
		{
			this( theElement, null, null );
		}

		RedBlackNode( AnyType theElement, RedBlackNode<AnyType> lt, RedBlackNode<AnyType> rt )
		{
			element  = theElement;
			left     = lt;
			right    = rt;
			color    = RedBlackTree.BLACK;
		}

		AnyType               element;    // The data in the node
		RedBlackNode<AnyType> left;       // Left child
		RedBlackNode<AnyType> right;      // Right child
		int                   color;      // Color
	}

	private RedBlackNode<AnyType> header;
	private RedBlackNode<AnyType> nullNode;

	private static final int BLACK = 1;    // BLACK must be 1
	private static final int RED   = 0;

	// Used in insert routine and its helpers
	private RedBlackNode<AnyType> current;
	private RedBlackNode<AnyType> parent;
	private RedBlackNode<AnyType> grand;
	private RedBlackNode<AnyType> great;
}